/*
 *  The XML:DB Initiative Software License, Version 1.0
 *
 *
 * Copyright (c) 2000-2003 The XML:DB Initiative.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        XML:DB Initiative (http://www.xmldb.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The name "XML:DB Initiative" must not be used to endorse or
 *    promote products derived from this software without prior written
 *    permission. For written permission, please contact info@xmldb.org.
 *
 * 5. Products derived from this software may not be called "XML:DB",
 *    nor may "XML:DB" appear in their name, without prior written
 *    permission of the XML:DB Initiative.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the XML:DB Initiative. For more information
 * on the XML:DB Initiative, please see <http://www.xmldb.org/>.
 */
 
module org { module xmldb { module api { module base {   
   interface Collection;
   interface ResourceIterator;
   interface Configurable;
   interface ResourceIterator;
   interface Resource;
   interface Service;
   interface Database;
  
   interface ErrorCodes {
      // Error Codes are broken into categories      
      
      // General API Errors
      const long UNKNOWN_ERROR = 0;
      const long VENDOR_ERROR = 1;
      const long NOT_IMPLEMENTED = 2;
      const long WRONG_CONTENT_TYPE = 3;
      const long PERMISSION_DENIED = 4;
      const long INVALID_URI = 5;

      // Service errors
      const long NO_SUCH_SERVICE = 100;      

      // Collection errors
      const long NO_SUCH_COLLECTION = 200;
      const long INVALID_COLLECTION = 201;
      const long COLLECTION_CLOSED = 202;

      // Resource errors
      const long NO_SUCH_RESOURCE = 300;
      const long INVALID_RESOURCE = 301;
      const long UNKNOWN_RESOURCE_TYPE = 302;
      
      // Database errors
      const long NO_SUCH_DATABASE = 400;
      const long INVALID_DATABASE = 401;
   };
      
   exception XMLDBException {
      string message;
      long errorCode;
      long vendorErrorCode;
   };      
   
   typedef sequence<Service> ServiceList;
   typedef sequence<Collection> CollectionList;
   typedef sequence<string> VersionList;
   typedef sequence<Database> DatabaseList;
   typedef sequence<string> NameList;
   
   interface Configurable {            
      string getProperty(in string name) raises (XMLDBException);
      void setProperty(in string name, in string value) raises (XMLDBException);
   };
   
   interface Resource {    
      Collection getParentCollection() raises (XMLDBException);
      string getId() raises (XMLDBException);
      string getResourceType() raises (XMLDBException);
      Object getContent() raises (XMLDBException);
      void setContent( in Object value ) raises (XMLDBException);      
   };
   
   interface Collection : Configurable {  
      string getName() raises (XMLDBException);

      ServiceList getServices() raises (XMLDBException);
      Service getService( in string name, in string version ) raises (XMLDBException);      
      
      Collection getParentCollection() raises (XMLDBException);
      
      long getChildCollectionCount() raises (XMLDBException);      
      NameList listChildCollections() raises (XMLDBException);
      Collection getChildCollection(in string name) raises (XMLDBException);
            
      long getResourceCount() raises (XMLDBException);      
      NameList listResources() raises (XMLDBException);
      Resource createResource( in string id, in string type ) raises (XMLDBException);
      void removeResource( in Resource res ) raises (XMLDBException);
      void storeResource( in Resource res ) raises (XMLDBException);
      Resource getResource( in string id ) raises (XMLDBException);
      
      string createId() raises (XMLDBException);
      boolean isOpen() raises (XMLDBException);
      void close() raises (XMLDBException);
   };
   
   interface Service : Configurable {                      
      string getName() raises (XMLDBException);
      string getVersion() raises (XMLDBException);
      void setCollection( in Collection col ) raises (XMLDBException);
   };

   interface Database : Configurable {      
      string getName() raises (XMLDBException);
      NameList getNames() raises (XMLDBException);
      Collection getCollection( in string uri, in string username, 
         in string password ) raises (XMLDBException);        
      boolean acceptsURI( in string uri ) raises (XMLDBException);     
      string getConformanceLevel() raises (XMLDBException);
   };  
      
   interface ResourceIterator {
      boolean hasMoreResources() raises (XMLDBException);
      Resource nextResource() raises (XMLDBException);
   };
   
   interface ResourceSet {      
      Resource getResource( in long index ) raises (XMLDBException);
      void addResource( in Resource res ) raises (XMLDBException);
      void removeResource( in long index ) raises (XMLDBException);
      ResourceIterator getIterator() raises (XMLDBException);
      Resource getMembersAsResource() raises (XMLDBException);
      long getSize() raises (XMLDBException);      
      void clear() raises (XMLDBException);            
   }

}; }; }; };
