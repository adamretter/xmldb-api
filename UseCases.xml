<?xml version="1.0"?>
<!-- $Id: UseCases.xml,v 1.1.1.1 2002/01/30 09:46:42 lars Exp $ -->

<!DOCTYPE specification SYSTEM "sbk:/style/dtd/specification-v10.dtd">

<specification>

   <header>
      <title>XML Database API Draft Proposal</title>
      <version>2001-09-20</version>
      <type>Working Draft</type>
      <authors>
         <person name="Members of the XML:DB API Mailing List" email="xapi-dev@xmldb.org"/>         
         <person name="Kimbro Staken (Editor)" email="kstaken@dbxmlgroup.com"/>                                    
      </authors>
      <notice>
      This is a XML:DB Working Draft for review by all interested parties.
      It is a draft document and may be updated, replaced, or obsoleted by other
      documents at any time. It is inappropriate to use Working Drafts as reference 
      material or to cite them as other than &quot;work in progress&quot;. This work
      is part of the <link href="http://www.xmldb.org/">XML:DB Project</link>.
      Comments on this specification should be sent to XML:DB API mailing list
      <link href="mailto:xapi-dev@xmldb.org">xapi-dev@xmldb.org</link>.
      </notice>
      <abstract>
      This document defines a draft specification for the XML Database API. 
      This API is being developed through the mailing lists of the XML:DB 
      organization and the contents are attributed to the members of those lists.      
      </abstract>
   </header>

   <body>
      <s1 title="API Use Cases">
         <p>
            The XML:DB API Use Cases attempt to outline the most common usage
            scenarios for the API and provide solutions to those scenarios. The
            solutions are written in a language that is basically Java but
            without the surrounding class context or error handling. 
            These solutions are very
            similar to the source IDL but it is necessary to use a concrete
            programming language to show proper type handling.
         </p>
         <p>
             All Use Cases assume the following preamble code. The scenario is
             simple access to a database from Vendor X. The database contains a
             collection of documents containing movie descriptions.
         </p>
         <source>
<![CDATA[
// Get a reference to the movies Collection
String collectionURI = 
   "xmldb:vendorx://db.xmlmovies.com:2030/movies";
Collection collection = 
   DatabaseManager.getCollection(collectionURI, null);]]>
         </source>
         
         <s2 title="Complete Example Program">
            <p>
               Most of the use cases here are small snippits of a program so it
               might not be entirely clear what an XML:DB API program would look
               like. To clarify things, this example is a fully functioning 
               Java program that simply
               needs a proper XML:DB Database implementation to work. This 
               program will query the database using XPath looking for movies 
               that have a title attribute of "Music Man". It then simply 
               prints the results to the screen.
            </p>
            <p>
               One thing in particular to note about this example is the finally
               clause that closes the collection. This is not apparent in the
               other use cases and for many Database implementations it is an
               essential step to insure that resources are managed properly.
            </p>
            <s3 title="Required Modules">
               <p>Core Level 1</p>               
            </s3>
            <s3 title="Solution">   
               <source>
<![CDATA[ 
package examples;

import org.xmldb.api.base.*;
import org.xmldb.api.modules.*;
import org.xmldb.api.*;

/**
 * Simple XML:DB API example to query the database.
 */
public class Example1 {
   public static void main(String[] args) throws Exception {
      Collection col = null;
      try {
         String driver = "org.vendorx.xmldb.DatabaseImpl";
         Class c = Class.forName(driver);
         
         Database database = (Database) c.newInstance();
         DatabaseManager.registerDatabase(database);
         col =
            DatabaseManager.getCollection("xmldb:vendorx://db.xmlmovies.com:2030/movies");
   
         String xpath = "//movie[@title='Music Man']";
         XPathQueryService service =
            (XPathQueryService) col.getService("XPathQueryService", "1.0");
         ResourceSet resultSet = service.query(xpath);
         
         ResourceIterator results = resultSet.getIterator();
         while (results.hasMoreResources()) {
            Resource res = results.nextResource();
            System.out.println((String) res.getContent());
         }
      }
      catch (XMLDBException e) {
         System.err.println("XML:DB Exception occured " + e.errorCode);
      }
      finally {
         if (col != null) {
            col.close();
         }
      }
   }
}]]>
               </source>
            </s3>

         </s2>
                  
         <s2 title="DOM Document Retrieval">
            <p>
               Retrieve a document from the database using a known ID. We want
               to work with the result as a DOM Document object.
            </p>
            <s3 title="Required Modules">
               <p>Core Level 0</p>               
            </s3>
            <s3 title="Solution">   
               <source>
<![CDATA[ 
String id = "gladiator-2000";
XMLResource resource = 
   (XMLResource) collection.getResource(id);

Document doc = (Document) resource.getContentAsDOM();]]>
               </source>
            </s3>

         </s2>
         
         <s2 title="Test XML Document Retrieval">
            <p>               
               Retrieve a document from the database using a known ID. We want
               to work with the result as text XML.
            </p>
            <s3 title="Required Modules">
               <p>Core Level 0</p>               
            </s3>
            <s3 title="Solution">   
               <source>
<![CDATA[ 
String id = "gladiator-2000";
XMLResource resource = 
   (XMLResource) collection.getResource(id);

String doc = (String) resource.getContent();]]>
               </source>
            </s3>
         </s2>
         
         <s2 title="SAX Document Retrieval">
            <p>
               Retrieve a document from the database using a known ID. We want
               to use a SAX content handler to handle the document.
            </p>
            <s3 title="Required Modules">
               <p>Core Level 0</p>               
            </s3>
            <s3 title="Solution">   
               <source>
<![CDATA[ 
String id = "gladiator-2000";
XMLResource resource = 
   (XMLResource) collection.getResource(id);

// A custom SAX Content Handler is required to handle the SAX events
ContentHandler handler = new MyContentHandler();

resource.getContentAsSAX(handle);]]>
               </source>
            </s3>
         </s2>
         
         <s2 title="Binary Content Retrieval">
            <p>
               Retrieve a binary BLOB from the database. The blob is identified
               with a known ID. The database will need to determine the data is
               binary and return to you the proper Resource type.
            </p>
            <s3 title="Required Modules">
               <p>Core Level 0, BinaryResource</p>               
            </s3>
            <s3 title="Solution">   
               <source>
<![CDATA[ 
String id = "gladiator-2000-img";
BinaryResource resource = 
   (BinaryResource) collection.getResource(id);

// Return value of getContent must be defined in the specific language mapping
// for the language used. For Java this is a byte array.
byte[] img = (byte[]) resource.getContent();]]>
               </source>
            </s3>
         </s2>
         
         <s2 title="Retrieving a DOM Node">
            <p>
               Retrieve a document from the database using a known ID. We want
               to work with the result as a DOM Node object.               
            </p>
            <s3 title="Required Modules">
               <p>Core Level 0</p>               
            </s3>
            <s3 title="Solution">   
               <source>
<![CDATA[ 
String id = "gladiator-2000";
XMLResource resource = 
   (XMLResource) collection.getResource(id);

Node node = (Node) resource.getContentAsDOM();]]>
               </source>
            </s3>
         </s2>
         
         <s2 title="Inserting a DOM Document">
            <p>
               Store a new DOM document in the database using a known ID.
            </p>
            <s3 title="Required Modules">
               <p>Core Level 0</p>               
            </s3>
            <s3 title="Solution">   
               <source>
<![CDATA[ 
// Document is assumed to be a valid DOM document. Where this comes from is
// outside the scope of the API
Document document;

String id = "gladiator-2000";
XMLResource resource = 
   (XMLResource) collection.createResource(id, XMLResource.RESOURCE_TYPE);

resource.setContentAsDOM(document);
collection.storeResource(resource);]]>
               </source>
            </s3>
         </s2>
         
         <s2 title="Inserting a SAX Document">
            <p>
               Use a SAX ContentHandler to store a new document in the database 
               using a known ID.               
            </p>
            <s3 title="Required Modules">
               <p>Core Level 0</p>               
            </s3>
            <s3 title="Solution">   
               <source>
<![CDATA[ 
// File containing the XML to be inserted
String fileName = "gladiator-2000.xml";

String id = "gladiator-2000";
XMLResource resource = 
   (XMLResource) collection.createResource(id, XMLResource.RESOURCE_TYPE);

ContentHandler handler = resource.setContentAsSax();

XMLReader reader = XMLReaderFactory.createXMLReader();
reader.setContentHandler(handler);
reader.parse(new InputSource(fileName));

collection.storeResource(resource);]]>
               </source>
            </s3>
         </s2>
         
         <s2 title="Inserting a Text XML Document">
            <p>
               Store a new text XML document in the database using a known ID.               
            </p>
            <s3 title="Required Modules">
               <p>Core Level 0</p>               
            </s3>
            <s3 title="Solution">   
               <source>
<![CDATA[
// document is assumed to be a valid XML document. Where this comes from is
// outside the scope of the API
String document;

String id = "gladiator-2000";
XMLResource resource = 
   (XMLResource) collection.createResource(id, XMLResource.RESOURCE_TYPE);

resource.setContent(document);
collection.storeResource(resource);]]>
               </source>
            </s3>
         </s2>
         
         <s2 title="Deleting a Resource">
            <p>
               Remove an existing Resource from the database using a known ID.
            </p>
            <s3 title="Required Modules">
               <p>Core Level 0</p>               
            </s3>
            <s3 title="Solution">   
               <source>
<![CDATA[ 
String id = "gladiator-2000";
collection.removeResource(collection.getResource(id));]]>
               </source>
            </s3>
         </s2>
         
         <s2 title="Updating a DOM Document">
            <p>
               Update an existing DOM document stored in the database.
            </p>
            <s3 title="Required Modules">
               <p>Core Level 0</p>               
            </s3>
            <s3 title="Solution">   
               <source>
<![CDATA[ 
String id = "gladiator-2000";
XMLResource resource = 
   (XMLResource) collection.getResource(id);

Document document = (Document) resource.getContentAsDOM();

// Change document ...

resource.setContent(document);
collection.storeResource(resource);]]>
               </source>
            </s3>
         </s2>
         
         <s2 title="Updating a Document using SAX">
            <p>
               
            </p>
            <note>Not sure how to do this.</note>
            <s3 title="Required Modules">
               <p>Core Level 0</p>               
            </s3>
            <s3 title="Solution">   
               <source>
<![CDATA[ ]]>
               </source>
            </s3>
         </s2>
         
         <s2 title="Updating a Text XML Document">
            <p>
               Update an existing Text XML document stored in the database.
            </p>
            <s3 title="Required Modules">
               <p>Core Level 0</p>               
            </s3>
            <s3 title="Solution">   
               <source>
<![CDATA[ 
String id = "gladiator-2000";
XMLResource resource = 
   (XMLResource) collection.getResource(id);

String document = (String) resource.getContent();

// Change document ...

resource.setContent(document);
collection.storeResource(resource);]]>
               </source>
            </s3>
         </s2>         
         
         <s2 title="Searching with XPath">
            <p>
               Search the collection for all movies with the title Gladiator. We
               want to work with the results as DOM Nodes.
            </p>
            <s3 title="Required Modules">
               <p>Core Level 1</p>               
            </s3>
            <s3 title="Solution">   
               <source>
<![CDATA[ 
String xpath = "/movie/title='Gladiator'";

XPathQueryService service =
   (XPathQueryService) collection.getService("XPathQueryService", "1.0");

ResourceSet resultSet = service.query(xpath);

ResourceIterator results = resultSet.getIterator();
while (results.hasMoreResources()) {
   XMLResource resource = 
      (XMLResource) results.nextResource();
   Node result = resource.getContentAsDOM();
}]]>
               </source>
            </s3>
         </s2>
         
         <s2 title="Transactional Inserting of DOM Documents">
            <p>
               Insert multiple DOM documents under the control of a transaction.     
            </p>
            <note>The current IDL for the TransactionService is more of a stub
            then anything. We should probably reuse an existing transaction API
            if possible.</note>
            <s3 title="Required Modules">
               <p>Core Level 0, TransactionService</p>               
            </s3>
            <s3 title="Solution">   
               <source>
<![CDATA[ 
// Documents are assumed to be valid DOM documents. Where this comes from is
// outside the scope of the API
Document document1;
Document document2;

String id1 = "gladiator-2000";
String id2 = "gonein60seconds-2000";

TransactionService transaction = 
   (TransactionService) collection.getService("TransactionService", "1.0");

transaction.begin();   

XMLResource resource1 = 
   (XMLResource) collection.createResource(id1, XMLResource.RESOURCE_TYPE);

resource1.setContentAsDOM(document1);
collection.storeResource(resource1);

XMLResource resource2 = 
   (XMLResource) collection.createResource(id2, XMLResource.RESOURCE_TYPE);

resource2.setContentAsDOM(document2);
collection.storeResource(resource2);

transaction.commit();]]>
               </source>
            </s3>
         </s2>
         
      </s1>
   </body>

</specification>
